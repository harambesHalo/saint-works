📁 Directory Structure
components/
├── desktop/
│   ├── GalleryLoader.jsx
│   ├── GalleryLoader.module.scss
│   ├── InitialGalleryPreloader.jsx
│   ├── InitialGalleryPreloader.module.scss
├── mobile/
│   └── MobileGalleryLoader.module.scss
│   └── MobileGalleryLoder.jsx
desktop/
├── DesktopGallery.jsx
├── DesktopGallery.scss
media/
├── Wall/
│   └── index.jsx
│   └── Model.js
mobile/
├── MobileGallery.jsx
├── MobileGallery.scss
page.jsx


📄 Code Contents:


GalleryLoader.jsx:

"use client";
import { useState, useEffect, useRef } from "react";
import styles from "./GalleryLoader.module.scss";
import Square from '@/common/SquareButton';
import dynamic from 'next/dynamic';

const Wall = dynamic(() => import('../../media/Wall'), {
  ssr: false,
  loading: () => <p>Loading 3D...</p>,
});

const GalleryLoader = ({ onComplete, imageUrls }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [loadedCount, setLoadedCount] = useState(0);
  const totalImages = imageUrls.length;
  const moveForwardFn = useRef(null);

  useEffect(() => {
    const imagePromises = imageUrls.map((src) => {
      return new Promise((resolve) => {
        const img = typeof window !== 'undefined' ? new window.Image() : null;
        if (!img) return resolve();
        img.src = src;
        img.onload = () => {
          setLoadedCount((prev) => prev + 1);
          resolve();
        };
        img.onerror = () => {
          setLoadedCount((prev) => prev + 1);
          resolve();
        };
      });
    });

    Promise.all(imagePromises)
      .then(() => setIsLoading(false))
      .catch((err) => {
        console.error("Error loading images:", err);
        setIsLoading(false);
      });
  }, [imageUrls]);

  const handleClick = () => {
    if (moveForwardFn.current) {
      moveForwardFn.current();
    }
    // setTimeout(() => {
    //   onComplete();
    // }, 1500);
  };

  return (
    <div>
      <div className={styles.backgroundContainer}>
        <div className={styles.galleryMedia}>
          <Wall registerMoveForward={fn => (moveForwardFn.current = fn)} />
        </div>
      </div>
      <div className={styles.loader}>
        <div className={styles.loaderContent}>
          {isLoading ? (
            <div className={styles.loadingState}>
              <div className={styles.spinner}></div>
              <p>Loading Gallery ({loadedCount}/{totalImages})</p>
            </div>
          ) : (
            <Square onClick={handleClick}>
              <p>Enter Gallery</p>
            </Square>
          )}
        </div>
      </div>
    </div>
  );
};

export default GalleryLoader;




InitialGalleryPreloader.jsx:

"use client";
import { useState, useEffect } from "react";
import styles from "./InitialGalleryPreloader.module.scss";

const InitialGalleryPreloader = ({ onComplete, assets }) => {
  const [progress, setProgress] = useState(0);
  const [isReady, setIsReady] = useState(false);
  
  useEffect(() => {
    let loaded = 0;
    const total = assets.length;
    
    // Preload all critical assets including the 3D model
    const preloadPromises = assets.map(url => {
      return new Promise((resolve) => {
        if (url.endsWith('.glb')) {
          // For 3D models, use fetch
          fetch(url)
            .then(() => {
              loaded++;
              setProgress(Math.floor((loaded / total) * 100));
              resolve();
            })
            .catch(error => {
              console.error(`Error preloading ${url}:`, error);
              loaded++;
              setProgress(Math.floor((loaded / total) * 100));
              resolve();
            });
        } else {
          // For images, use Image object
          const img = new Image();
          img.src = url;
          img.onload = () => {
            loaded++;
            setProgress(Math.floor((loaded / total) * 100));
            resolve();
          };
          img.onerror = () => {
            console.error(`Error preloading ${url}`);
            loaded++;
            setProgress(Math.floor((loaded / total) * 100));
            resolve();
          };
        }
      });
    });
    
    // When all assets are loaded, complete
    Promise.all(preloadPromises)
      .then(() => {
        // Set ready state first
        setIsReady(true);
        
        // Add small delay to ensure everything is ready
        // This prevents flashes during component transitions
        setTimeout(() => {
          onComplete();
        }, 500);
      })
      .catch(error => {
        console.error("Error during preloading:", error);
        setIsReady(true);
        // Still complete even if there are errors
        setTimeout(() => {
          onComplete();
        }, 500);
      });
  }, [assets, onComplete]);

  return (
    <div className={styles.preloader}>
      <div className={styles.content}>
        <div className={styles.spinner}></div>
        <h2>Loading Gallery</h2>
        <div className={styles.progressBar}>
          <div 
            className={styles.progressFill} 
            style={{ width: `${progress}%` }}
          ></div>
        </div>
        <p>{progress}%</p>
      </div>
    </div>
  );
};

export default InitialGalleryPreloader;



MobileGalleryLoder.jsx:

"use client";
import { useState, useEffect } from "react";
import styles from "./MobileGalleryLoader.module.scss";
import Square from '@/common/SquareButton';
import Image from 'next/image';

const MobileGalleryLoader = ({ onComplete, imageUrls }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [loadedCount, setLoadedCount] = useState(0);
  const totalImages = imageUrls.length;

  useEffect(() => {
    const imagePromises = imageUrls.map((src) => {
      return new Promise((resolve) => {
        const img = typeof window !== 'undefined' ? new window.Image() : null;
        if (!img) return resolve();
        img.src = src;
        img.onload = () => {
          setLoadedCount((prev) => prev + 1);
          resolve();
        };
        img.onerror = () => {
          setLoadedCount((prev) => prev + 1);
          resolve();
        };
      });
    });

    Promise.all(imagePromises)
      .then(() => setIsLoading(false))
      .catch((err) => {
        console.error("Error loading images:", err);
        setIsLoading(false);
      });
  }, [imageUrls]);

  const handleClick = () => {
    // Just directly call onComplete without any animations
    onComplete();
  };

  return (
    <div>
      <div className={styles.backgroundContainer}>
        <Image
            src="/images/gallery-wall.png"
            fill={true}
            alt="background"
            priority
            className={styles.backgroundImage}
          />
      </div>
      <div className={styles.loader}>
        <div className={styles.loaderContent}>
          {isLoading ? (
            <div className={styles.loadingState}>
              <div className={styles.spinner}></div>
              <p>Loading Gallery ({loadedCount}/{totalImages})</p>
            </div>
          ) : (
            <Square onClick={handleClick}>
              <p>Enter Gallery</p>
            </Square>
          )}
        </div>
      </div>
    </div>
  );
};

export default MobileGalleryLoader;



DesktopGallery.jsx:

'use client';
import Image from "next/image";
import './DesktopGallery.scss';

const DesktopGallery = () => {

    return(
        
        <div className='gallery-page'>
           <div className='spotlight-1'></div>
           <div className='spotlight-2'></div> 
           <div className="newsWrapper">
            <Image
              src="/images/news.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="news-painting"
            />
          </div>
          <div className="redlineWrapper">
            <Image
              src="/images/redline2.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="red-painting"
            />
          </div>
          <div className="squiggleWrapper">
            <Image
              src="/images/squiggle2.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="squiggle-painting"
            />
          </div>
          <div className="boxImageWrapper">
            <Image
              src="/images/header.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="box-painting"
            />
          </div>
          <div className="oceanImageWrapper">
            <Image
              src="/images/blue-ocean.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="ocean-painting"
            />
          </div>
          <div className="weatherImageWrapper">
            <Image
              src="/images/weather.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="weather-painting"
            />
          </div>
        </div>
    );
}

export default DesktopGallery;



index.jsx:

import { Canvas } from '@react-three/fiber';
import { Environment } from '@react-three/drei';
import Model from './Model';

const Wall = ({ registerMoveForward }) => {
  return (
    <Canvas style={{ background: '#000000' }}>
      <Model registerMoveForward={registerMoveForward} />
      <directionalLight intensity={0.75} position={[0, 2, 3]} />
      <Environment preset="city" />
    </Canvas>
  );
};

export default Wall;




Model.js:

import React, { useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import { AnimationMixer, Box3, Vector3 } from 'three';

const Model = ({ registerMoveForward }) => {
  const { scene, animations } = useGLTF('/medias/room7.glb');
  const { viewport, clock } = useThree();
  const modelRef = useRef();
  const mixerRef = useRef();
  const actionsRef = useRef([]);

  const velocity = useRef(0);
  const direction = new Vector3(0.9, 0, 1.0);
  const stopZ = 3.1;

  useEffect(() => {
    if (registerMoveForward) {
      registerMoveForward(() => {
        console.log("moveForward() called");
        velocity.current = 0.03;
      });
    }
  }, [registerMoveForward]);

  useEffect(() => {
    if (animations.length) {
      mixerRef.current = new AnimationMixer(scene);
      animations.forEach((clip) => {
        const action = mixerRef.current.clipAction(clip);
        action.paused = true;
        actionsRef.current.push(action);
      });
    }
  }, [animations, scene]);

  useEffect(() => {
    const box = new Box3().setFromObject(scene);
    const center = new Vector3();
    box.getCenter(center);
    scene.position.sub(center);
  }, [scene]);

  useFrame(() => {
    if (mixerRef.current) {
      mixerRef.current.update(clock.getDelta());
    }

    if (velocity.current > 0 && modelRef.current) {
      modelRef.current.position.addScaledVector(direction, velocity.current);

      if (modelRef.current.position.z >= stopZ) {
        velocity.current= 0;
        console.log("User now in gallery");
      }
    }
  });

  return (
    <group
      ref={modelRef}
      scale={viewport.width / 5.35}
      rotation={[0, 4.72, 0]}
      position={[-1.75, 0, 0]}
    >
      <primitive object={scene} />
    </group>
  );
};

useGLTF.preload('/medias/medias/room7.glb');
export default Model;




MobileGallery.jsx:

'use client';
import Image from "next/image";
import './MobileGallery.scss';
import { useEffect } from 'react';

const MobileGallery = () => {
  // This effect ensures the gallery works with Lenis
  useEffect(() => {
    // Update Lenis to handle our gallery content if it exists
    if (typeof window !== 'undefined' && window.lenis) {
      // Reset any scroll position
      window.scrollTo(0, 0);
      // Update Lenis to recognize new content
      window.lenis.resize();
    }
    
    // Make sure body scrolling is enabled
    document.body.style.overflow = 'auto';
    document.body.style.height = 'auto';
    
    // Add touch scroll indicator if needed
    const addScrollHint = () => {
      const gallery = document.querySelector('.gallery-page-mobile');
      if (gallery && !document.querySelector('.scroll-hint')) {
        const hint = document.createElement('div');
        hint.className = 'scroll-hint';
        hint.innerHTML = '↓ Scroll to see more ↓';
        hint.style.textAlign = 'center';
        hint.style.padding = '10px';
        hint.style.marginTop = '10px';
        hint.style.opacity = '0.7';
        gallery.appendChild(hint);
        
        // Fade out hint after user scrolls
        const removeHint = () => {
          if (window.scrollY > 50) {
            hint.style.opacity = '0';
            hint.style.transition = 'opacity 0.5s ease-out';
            setTimeout(() => {
              hint.remove();
            }, 500);
            window.removeEventListener('scroll', removeHint);
          }
        };
        
        window.addEventListener('scroll', removeHint);
      }
    };
    
    // Add scroll hint with a small delay
    setTimeout(addScrollHint, 1000);
    
    return () => {
      // Cleanup if needed
    };
  }, []);

  return (
    <div className='gallery-page-mobile'>
      <div className="newsWrapperMobile">
        <Image
          src="/images/news.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="news-painting-mobile"
        />
      </div>
      <div className="redlineWrapperMobile">
        <Image
          src="/images/redline2.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="red-painting-mobile"
        />
      </div>
      <div className="boxImageWrapperMobile">
        <Image
          src="/images/header.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="box-painting-mobile"
        />
      </div>
      <div className="squiggleWrapperMobile">
        <Image
          src="/images/squiggle2.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="squiggle-painting-mobile"
        />
      </div>
      <div className="oceanImageWrapperMobile">
        <Image
          src="/images/blue-ocean.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="ocean-painting-mobile"
        />
      </div>
      <div className="weatherImageWrapperMobile">
        <Image
          src="/images/weather.png"
          width={500}
          height={300}
          alt="background-mobile"
          priority
          className="weather-painting-mobile"
        />
      </div>
      {/* Add padding at the bottom to ensure last image has space below */}
      <div className="gallery-bottom-spacer" style={{ height: '50px', width: '100%' }}></div>
    </div>
  );
}

export default MobileGallery;



page.jsx:

'use client';

import { useState, useEffect } from "react";
import { useDeviceContext } from "../../../lib/hooks/useDeviceContext";
import DesktopGallery from "./desktop/DesktopGallery";
import MobileGallery from "./mobile/MobileGallery";
import GalleryLoader from "./components/desktop/GalleryLoader";
import MobileGalleryLoader from "./components/mobile/MobileGalleryLoder";
import InitialGalleryPreloader from "./components/desktop/InitialGalleryPreloader";

// Inline styles to prevent flash of white
const containerStyle = {
  position: 'fixed',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  backgroundColor: '#000000', // Black background
  overflow: 'hidden',
  zIndex: 1
};

const Gallery = () => {
  const { isMobile, isClient } = useDeviceContext();
  
  // Three possible states: "preloading", "loading3d", "gallery"
  const [loadingState, setLoadingState] = useState("preloading");
  const [isHydrated, setIsHydrated] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false);
  
  // Assets and URLs
  const imageUrls = [
    "/images/header.png",
    "/images/news.png",
    "/images/redline2.png",
    "/images/squiggle2.png",
    "/images/blue-ocean.png",
    "/images/weather.png",
    "/images/redline2.png",
  ];
  
  const critical3dAssets = [
    // "/medias/3d_gallery_wall.glb",
    "/medias/room7.glb",
    ...imageUrls
  ];
  
  const mobileImageUrls = [
    "/images/header.png",
    "/images/news.png",
    "/images/redline2.png",
    "/images/squiggle2.png",
    "/images/blue-ocean.png",
    "/images/weather.png",
    "/images/redline2.png",
  ];

  // Handle hydration
  useEffect(() => {
    setIsHydrated(true);
    
    // Set initial body background to black to prevent white flashes
    document.body.style.backgroundColor = "#141516";
    
    return () => {
      // Restore default background when component unmounts
      document.body.style.backgroundColor = "";
    };
  }, []);

  // Handle completion of the initial preloading step
  const handlePreloadComplete = () => {
    setIsTransitioning(true);
    // Add a short delay to ensure smooth transition
    setTimeout(() => {
      setLoadingState("loading3d");
      setIsTransitioning(false);
    }, 100);
  };

  // Handle when the gallery loader completes
  const handleEnterGallery = () => {
    setIsTransitioning(true);
    // Add a short delay to ensure smooth transition
    setTimeout(() => {
      setLoadingState("gallery");
      setIsTransitioning(false);
    }, 100);
  };

  // Wrapper component to prevent flashes during transitions
  const renderWithTransitionPrevention = (ComponentToRender, props = {}) => {
    return (
      <div style={containerStyle}>
        {isTransitioning ? (
          // Show a black div during component transitions
          <div style={{width: '100%', height: '100%', backgroundColor: '#141516'}}></div>
        ) : (
          <ComponentToRender {...props} />
        )}
      </div>
    );
  };

  // If not yet hydrated, show a black screen
  if (!isHydrated) {
    return <div style={containerStyle}></div>;
  }

  // Mobile doesn't need the initial preloader
  if (isMobile) {
    if (loadingState === "preloading" || loadingState === "loading3d") {
      return renderWithTransitionPrevention(MobileGalleryLoader, {
        imageUrls: mobileImageUrls,
        onComplete: handleEnterGallery
      });
    } else {
      return renderWithTransitionPrevention(MobileGallery);
    }
  } 
  
  // Desktop flow with three distinct loading steps
  else {
    if (loadingState === "preloading") {
      return renderWithTransitionPrevention(InitialGalleryPreloader, {
        assets: critical3dAssets,
        onComplete: handlePreloadComplete
      });
    } else if (loadingState === "loading3d") {
      return renderWithTransitionPrevention(GalleryLoader, {
        imageUrls: imageUrls,
        onComplete: handleEnterGallery
      });
    } else {
      return renderWithTransitionPrevention(DesktopGallery);
    }
  }
};

export default Gallery;


