📁 Directory Structure
components/
├── desktop/
│   ├── Gallery3d/
│   │   ├── Gallery3d.jsx
│   │   ├── Gallery3d.module.scss
│   ├── GalleryLoader/
│   │   └── GalleryLoader.jsx
│   │   └── GalleryLoader.module.scss
├── mobile/
│   └── MobileGallery/
│   │   ├── MobileGallery.jsx
│   │   ├── MobileGallery.scss
│   └── MobileGalleryLoader/
│   │   └── MobileGalleryLoader.module.scss
│   │   └── MobileGalleryLoder.jsx
media/
├── Wall/
│   └── index.jsx
│   └── Model.js
│   └── style.module.scss
page.jsx
style.module.scss


📄 Code Contents:


Gallery3d.jsx:

import { useRef, useState, useEffect } from "react";
import styles from "./Gallery3d.module.scss";
import dynamic from 'next/dynamic';
import GalleryPreloader from '@/app/(page)/gallery/components/desktop/GalleryLoader/GalleryLoader';
import Square from '@/common/SquareButton';

const Wall = dynamic(() => import('../../../media/Wall'), {
  ssr: false,
  loading: () => <p>Loading 3D...</p>,
});

const Gallery3d = ({ imageUrls }) => {
  const moveForwardFn = useRef(null);
  const [isLoaded, setIsLoaded] = useState(false);
  const [showPreloader, setShowPreloader] = useState(true);
  const buttonRef = useRef();

  const handleClick = () => {
    if (moveForwardFn.current) moveForwardFn.current();

    // Hide the button without re-rendering
    if (buttonRef.current) {
      buttonRef.current.style.opacity = 0;
      buttonRef.current.style.pointerEvents = "none";
    }
  };

  const handleLoadingComplete = () => {
    setIsLoaded(true);
    console.log("Loading Complete");
  };

  return (
    <div className={styles.canvasContainer}>
      <Wall 
        registerMoveForward={fn => (moveForwardFn.current = fn)} 
        onLoadingComplete={handleLoadingComplete}
      />

      {showPreloader && (
        <div className={styles.visiblePreloader}>
          <div className={styles.preloaderText} ref={buttonRef}>
            <Square onClick={handleClick}>
              <p>Enter Gallery</p>
            </Square>
          </div>
          <GalleryPreloader
            onComplete={() => setShowPreloader(false)}
          />
        </div>
      )}
    </div>
  );
};

export default Gallery3d;




Gallery3d.module.scss:

.canvasContainer {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
  background-color: var(--alt-bg);
  .visiblePreloader {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    .preloaderText {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 14px;
      color: var(--slate);
    }
  }
}



GalleryLoader.jsx:

'use client';
import { useEffect, useState } from 'react';
import { AnimatePresence } from 'framer-motion';
import styles from './GalleryLoader.module.scss';
import WipeTransition from '@/components/Transitions/WipeTransition/WipeTranstion';

export default function GalleryPreloader() {
    const [showPreloader, setShowPreloader] = useState(true);
    
    useEffect(() => {
        // After a brief delay, start the exit animation
        const timer = setTimeout(() => {
            setShowPreloader(false);
        }, 1500);
        
        return () => clearTimeout(timer);
    }, []);
    
    // Handle wipe transition callbacks
    const handleWipeMidpoint = () => {
        // Can trigger any midpoint actions here
    };
    
    const handleWipeComplete = () => {
        // Can trigger any completion actions here
    };

    return (
        <div className={styles.AboutPreloaderContainer}>
            <AnimatePresence mode="wait">
                {showPreloader && (
                    <WipeTransition 
                        key="wipe-transition"
                        onMidpoint={handleWipeMidpoint}
                        onComplete={handleWipeComplete}
                    />
                )}
            </AnimatePresence>
        </div>
    );
}



GalleryLoader.module.scss:

.GalleryPreloaderContainer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 100;
}

.GalleryPreloader {
    height: 100vh;
    width: 100vw;
    display: flex;
    align-items: center;
    justify-content: center;
    position: fixed;
    z-index: 99;
    background-color: var(--alt-bg);
}



MobileGallery.jsx:

'use client';
import Image from "next/image";
import './MobileGallery.scss';
import { useEffect } from 'react';

const MobileGallery = () => {
  // This effect ensures the gallery works with Lenis
  useEffect(() => {
    // Update Lenis to handle our gallery content if it exists
    if (typeof window !== 'undefined' && window.lenis) {
      // Reset any scroll position
      window.scrollTo(0, 0);
      // Update Lenis to recognize new content
      window.lenis.resize();
    }
    
    // Make sure body scrolling is enabled
    document.body.style.overflow = 'auto';
    document.body.style.height = 'auto';
    
    // Add touch scroll indicator if needed
    const addScrollHint = () => {
      const gallery = document.querySelector('.gallery-page-mobile');
      if (gallery && !document.querySelector('.scroll-hint')) {
        const hint = document.createElement('div');
        hint.className = 'scroll-hint';
        hint.innerHTML = '↓ Scroll to see more ↓';
        hint.style.textAlign = 'center';
        hint.style.padding = '10px';
        hint.style.marginTop = '10px';
        hint.style.opacity = '0.7';
        gallery.appendChild(hint);
        
        // Fade out hint after user scrolls
        const removeHint = () => {
          if (window.scrollY > 50) {
            hint.style.opacity = '0';
            hint.style.transition = 'opacity 0.5s ease-out';
            setTimeout(() => {
              hint.remove();
            }, 500);
            window.removeEventListener('scroll', removeHint);
          }
        };
        
        window.addEventListener('scroll', removeHint);
      }
    };
    
    // Add scroll hint with a small delay
    setTimeout(addScrollHint, 1000);
    
    return () => {
      // Cleanup if needed
    };
  }, []);

  return (
    <div className='gallery-page-mobile'>
      <div className="newsWrapperMobile">
        <Image
          src="/images/news.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="news-painting-mobile"
        />
      </div>
      <div className="redlineWrapperMobile">
        <Image
          src="/images/redline2.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="red-painting-mobile"
        />
      </div>
      <div className="boxImageWrapperMobile">
        <Image
          src="/images/header.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="box-painting-mobile"
        />
      </div>
      <div className="squiggleWrapperMobile">
        <Image
          src="/images/squiggle2.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="squiggle-painting-mobile"
        />
      </div>
      <div className="oceanImageWrapperMobile">
        <Image
          src="/images/blue-ocean.png"
          width={500}
          height={300}
          alt="background"
          priority
          className="ocean-painting-mobile"
        />
      </div>
      <div className="weatherImageWrapperMobile">
        <Image
          src="/images/weather.png"
          width={500}
          height={300}
          alt="background-mobile"
          priority
          className="weather-painting-mobile"
        />
      </div>
      {/* Add padding at the bottom to ensure last image has space below */}
      <div className="gallery-bottom-spacer" style={{ height: '50px', width: '100%' }}></div>
    </div>
  );
}

export default MobileGallery;



MobileGallery.scss:

.gallery-page-mobile {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    min-height: 100vh;
    background-color: var(--alt-bg);
    align-items: center;
    justify-content: center;

    .newsWrapperMobile {
        display: flex;
        z-index: 1;
        align-items: center;
        justify-content: center;
        margin-top: 25%;
        transform: rotate(-0.75deg);
        .news-painting-mobile {
            width: 75%;
            height: auto;
            object-fit: contain;
            display: block;
            z-index: 1;
        }
    }
    .squiggleWrapperMobile {
        display: flex;
        width: 100%;
        z-index: 1;
        align-items: center;
        justify-content: center;
        margin-top: 8%;
        .squiggle-painting-mobile {
            width: 75%;
            height: auto;
            object-fit: contain;
            display: block;
            z-index: 1;
        }
    }
    .boxImageWrapperMobile {
        display: flex;
        width: 100%;
        z-index: 1;
        align-items: center;
        justify-content: center;
        margin-top: 8%;
        transform: rotate(-1.25deg);
        .box-painting-mobile {
            width: 85%;
            height: auto;
            object-fit: contain;
            display: block;
            z-index: 1;
        }
    }
    .weatherImageWrapperMobile {
        display: flex;
        width: 100%;
        z-index: 1;
        align-items: center;
        justify-content: center;
        margin-top: 8%;
        transform: rotate(0.25deg);
        .weather-painting-mobile {
            width: 75%;
            height: auto;
            object-fit: contain;
            display: block;
            z-index: 1;
        }
    }
    .oceanImageWrapperMobile {
        display: flex;
        width: 100%;
        z-index: 1;
        align-items: center;
        justify-content: center;
        margin-top: 8%;
        transform: rotate(-0.15deg);
        .ocean-painting-mobile {
            width: 85%;
            height: auto;
            object-fit: contain;
            display: block;
            z-index: 1;
        }
    }
    .redlineWrapperMobile {
        display: flex;
        width: 100%;
        z-index: 1;
        align-items: center;
        justify-content: center;
        margin-top: 8%;
        transform: rotate(0.35deg);
        .red-painting-mobile {
            width: 75%;
            height: auto;
            object-fit: contain;
            display: block;
            z-index: 1;
        }
    }
  }




MobileGalleryLoader.module.scss:

.backgroundContainer {
    .galleryMedia{
      z-index: 0;
      height: 100%;
      width: 100%;
      position: absolute;
    }
    .galleryWallImg{
      z-index: 0;
    }
  }
  
  .loader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: transparent; // Using your bg color from globals.css
    display: flex;
    justify-content: center;
    align-items: center;
    .loaderContent {
      text-align: center;
      padding: 2rem;
      .enterButton {
        background-color: var(--blue);
        color: white;
        border: none;
        padding: 1rem 2rem;
        font-size: 1.2rem;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
        &:hover {
          background-color: #0069a1; // Darker blue on hover
        }
      }
      p {
        margin-top: 1rem;
        font-size: 1.2rem;
        color: var(--sig-green);
      }
      .loadingState {
        z-index: 2;
        display: flex;
        flex-direction: column;
        align-items: center;
        .spinner {
          width: 50px;
          height: 50px;
          border: 5px solid rgba(0, 0, 0, 0.1);
          border-radius: 50%;
          border-top-color: var(--sig-green);
          animation: spin 1s ease-in-out infinite;
        }
        
      }
    }
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }



MobileGalleryLoder.jsx:

"use client";
import { useState, useEffect } from "react";
import styles from "./MobileGalleryLoader.module.scss";
import Square from '@/common/SquareButton';
import Image from 'next/image';

const MobileGalleryLoader = ({ onComplete, imageUrls }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [loadedCount, setLoadedCount] = useState(0);
  const totalImages = imageUrls.length;

  useEffect(() => {
    const imagePromises = imageUrls.map((src) => {
      return new Promise((resolve) => {
        const img = typeof window !== 'undefined' ? new window.Image() : null;
        if (!img) return resolve();
        img.src = src;
        img.onload = () => {
          setLoadedCount((prev) => prev + 1);
          resolve();
        };
        img.onerror = () => {
          setLoadedCount((prev) => prev + 1);
          resolve();
        };
      });
    });

    Promise.all(imagePromises)
      .then(() => setIsLoading(false))
      .catch((err) => {
        console.error("Error loading images:", err);
        setIsLoading(false);
      });
  }, [imageUrls]);

  const handleClick = () => {
    // Just directly call onComplete without any animations
    onComplete();
  };

  return (
    <div>
      <div className={styles.backgroundContainer}>
        <Image
            src="/images/gallery-wall.png"
            fill={true}
            alt="background"
            priority
            className={styles.backgroundImage}
          />
      </div>
      <div className={styles.loader}>
        <div className={styles.loaderContent}>
          {isLoading ? (
            <div className={styles.loadingState}>
              <div className={styles.spinner}></div>
              <p>Loading Gallery ({loadedCount}/{totalImages})</p>
            </div>
          ) : (
            <Square onClick={handleClick}>
              <p>Enter Gallery</p>
            </Square>
          )}
        </div>
      </div>
    </div>
  );
};

export default MobileGalleryLoader;



index.jsx:

import { Canvas } from '@react-three/fiber';
import { Environment, useProgress } from '@react-three/drei';
import Model from './Model';
import { useEffect, useState } from 'react';
import styles from './style.module.scss';
import { ACESFilmicToneMapping } from 'three'

// Component to track loading progress
const LoadingTracker = ({ onLoaded }) => {
  const { progress, loaded, total, active } = useProgress();

  useEffect(() => {
    console.log(`[LoadingTracker] Progress: ${progress}% | Loaded: ${loaded}/${total} | Active: ${active}`);
    
    if (progress === 100 && loaded === total && active === false) {
      console.log("[LoadingTracker] Everything loaded, calling onLoaded()");
      onLoaded();
    }
  }, [progress, loaded, total, active, onLoaded]);

  return null;
};

const Wall = ({ registerMoveForward, onLoadingComplete }) => {
  const [canvasKey, setCanvasKey] = useState(0);

  useEffect(() => {
    if (onLoadingComplete) {
      // This will trigger a Canvas remount when loading completes
      setCanvasKey(prev => prev + 1);
    }
  }, [onLoadingComplete]);

  return (
    <Canvas
      key={canvasKey} // 🔁 Force remount
      className={styles.wallParent}
      style={{ background: '#222' }}
      shadows
      gl={{ 
        toneMapping: ACESFilmicToneMapping,
        toneMappingExposure: .5 // Adjust this value to make lighting less intense
      }}
    >
      <LoadingTracker onLoaded={onLoadingComplete} />
      <Model registerMoveForward={registerMoveForward} />
      {/* <directionalLight intensity={0.75} position={[0, 2, 3]} /> */}
      {/* <Environment preset="warehouse" /> */}
      {/* Preset must be one of: apartment, city, dawn, forest, lobby, night, park, studio, sunset, warehouse*/} 
    </Canvas>
  );
};
export default Wall;



Model.js:

// Model.js

import React, { useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame, useThree } from '@react-three/fiber';
import {
  AnimationMixer,
  Box3,
  Vector3,
  RepeatWrapping,
  LinearFilter,
  LinearMipMapLinearFilter
} from 'three';

const Model = ({ registerMoveForward }) => {
  const { scene, animations } = useGLTF('/medias/bakedGallery.glb', {
    onLoad:  () => console.log('[Model] GLB model loaded successfully'),
    onError: err => console.error('[Model] Error loading GLB:', err)
  });
  const { viewport, clock, gl } = useThree();
  const modelRef   = useRef();
  const mixerRef   = useRef();
  const velocity   = useRef(0);
  const direction  = new Vector3(1.0, 0, 1.8);
  const stopZRef   = useRef(3);

  // ─── enable shadows & tweak material maps ─────────────────────────────────
  useEffect(() => {
    const maxAniso = gl.capabilities.getMaxAnisotropy();

    scene.traverse(child => {
      if (child.isMesh) {
        // shadows
        child.castShadow    = true;
        child.receiveShadow = true;

        const mat = child.material;
        if (mat) {
          // 1) soften normal strength
          if (mat.normalScale) {
            mat.normalScale.set(0.40, 0.40);
          }

          // 2) fix filtering + anisotropy on the normal map
          if (mat.normalMap) {
            mat.normalMap.wrapS       =
            mat.normalMap.wrapT       = RepeatWrapping;
            mat.normalMap.minFilter   = LinearMipMapLinearFilter;
            mat.normalMap.magFilter   = LinearFilter;
            mat.normalMap.anisotropy  = maxAniso;
          }

          // 3) same for roughness map if you baked one
          if (mat.roughnessMap) {
            mat.roughnessMap.wrapS       =
            mat.roughnessMap.wrapT       = RepeatWrapping;
            mat.roughnessMap.minFilter   = LinearMipMapLinearFilter;
            mat.roughnessMap.magFilter   = LinearFilter;
            mat.roughnessMap.anisotropy  = maxAniso;
          }

          mat.needsUpdate = true;
        }
      }

      if (child.isLight) {
        child.castShadow = true;
        child.shadow.mapSize.set(1024, 1024);
        child.shadow.bias = -0.00008;
      }
    });
  }, [scene, gl]);


  // ─── register moveForward callback ────────────────────────────────────────
  useEffect(() => {
    if (registerMoveForward) {
      registerMoveForward(() => {
        velocity.current = 0.03;
      });
    }
  }, [registerMoveForward]);


  // ─── setup mixer & center model & compute stopZ ───────────────────────────
  useEffect(() => {
    if (animations.length) {
      mixerRef.current = new AnimationMixer(scene);
    }

    const box    = new Box3().setFromObject(scene);
    const center = new Vector3();
    box.getCenter(center);
    scene.position.sub(center);

    const size = new Vector3();
    box.getSize(size);
    stopZRef.current = size.z * 0.75;

    console.log('[Model] Scene box size:', size);
    console.log('[Model] Scene center offset:', center);
  }, [animations, scene]);


  // ─── animate mixer & move model forward ──────────────────────────────────
  useFrame(() => {
    if (mixerRef.current) {
      mixerRef.current.update(clock.getDelta());
    }

    if (velocity.current > 0 && modelRef.current) {
      modelRef.current.position.addScaledVector(direction, velocity.current);

      if (modelRef.current.position.z >= stopZRef.current) {
        velocity.current = 0;
      }
    }
  });


  const baseScale = Math.min(viewport.width, viewport.height) / 2.5;

  return (
    <group
      ref={modelRef}
      scale={[baseScale, baseScale, baseScale]}
      rotation={[0, 0, 0]}
      position={[0, 1.5, -5.25]}
    >
      <primitive object={scene} />
    </group>
  );
};

useGLTF.preload('/medias/bakedGallery.glb');
export default Model;




style.module.scss:

.wallParent{
    position: absoolute;
    height: 100%;
    width: 100%;
    display: flex;
    background-color: aqua;
    z-index: 0;
    .loadingTracker{
        position: absolute;
        background-color: var(--alt-bg);
        z-index: 0;
    }
}



page.jsx:

'use client';

import { useDeviceContext } from "../../../lib/hooks/useDeviceContext";
import MobileGallery from "./components/mobile/MobileGallery/MobileGallery";
import Gallery3d from "./components/desktop/Gallery3d/Gallery3d";
import styles from './style.module.scss';

const Gallery = () => {
  const { isMobile } = useDeviceContext();
  
  // Image URLs
  const imageUrls = [
    "/images/header.png",
    "/images/news.png",
    "/images/redline2.png",
    "/images/squiggle2.png",
    "/images/blue-ocean.png",
    "/images/weather.png",
    "/images/redline2.png",
  ];

  // Simplified rendering logic
  if (isMobile) {
    return <MobileGallery imageUrls={imageUrls} />;
  } else {
    return (
        <div className={styles.desktopGallery}>
            <Gallery3d />
        </div>
    );
  }
};

export default Gallery;



style.module.scss:


.desktopGallery{
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--alt-bg);
    overflow: hidden;
}


