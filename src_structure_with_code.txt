üìÅ Directory Structure
components/
‚îú‚îÄ‚îÄ GalleryLoader.jsx
‚îú‚îÄ‚îÄ GalleryLoader.module.scss
desktop/
‚îú‚îÄ‚îÄ DesktopGallery.jsx
‚îú‚îÄ‚îÄ DesktopGallery.scss
media/
‚îú‚îÄ‚îÄ Wall/
‚îÇ   ‚îî‚îÄ‚îÄ index.jsx
‚îÇ   ‚îî‚îÄ‚îÄ Model.js
mobile/
‚îú‚îÄ‚îÄ MobileGallery.jsx
‚îú‚îÄ‚îÄ MobileGallery.scss
page.jsx


üìÑ Code Contents:


GalleryLoader.jsx:

"use client";
import { useState, useEffect, forwardRef } from "react";
import styles from "./GalleryLoader.module.scss";
import Square from '../../../../common/SquareButton';
import Image from "next/image";
import dynamic from 'next/dynamic';

const Wall = dynamic(() => import('../media/Wall').then(mod => {
    return forwardRef((props, ref) => <mod.default {...props} ref={ref} />);
  }), {
    ssr: false,
    loading: () => <p>Loading 3D...</p>,
  });

const GalleryLoader = ({ onComplete, imageUrls, wallRef }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [loadedCount, setLoadedCount] = useState(0);
  const totalImages = imageUrls.length;

  useEffect(() => {
    const imagePromises = imageUrls.map((src) => {
      return new Promise((resolve) => {
        const img = typeof window !== 'undefined' ? new window.Image() : null;
        img.src = src;
        img.onload = () => {
          setLoadedCount((prev) => prev + 1);
          resolve();
        };
        img.onerror = () => {
          setLoadedCount((prev) => prev + 1);
          resolve();
        };
      });
    });

    Promise.all(imagePromises)
      .then(() => setIsLoading(false))
      .catch((err) => {
        console.error("Error loading images:", err);
        setIsLoading(false);
      });
  }, [imageUrls]);

  return (
    <div>
      <div className={styles.backgroundContainer}>
        <div className={styles.galleryMedia}>
          {/* üß† Use the ref passed from the parent */}
          <Wall ref={wallRef} />
        </div>
      </div>
      <div className={styles.loader}>
        <div className={styles.loaderContent}>
          {isLoading ? (
            <div className={styles.loadingState}>
              <div className={styles.spinner}></div>
              <p>Loading Gallery ({loadedCount}/{totalImages})</p>
            </div>
          ) : (
            <Square onClick={onComplete}>
              <p>Enter Gallery</p>
            </Square>
          )}
        </div>
      </div>
    </div>
  );
};

export default GalleryLoader;




DesktopGallery.jsx:

'use client';
import Image from "next/image";
import './DesktopGallery.scss';

const DesktopGallery = () => {

    return(
        
        <div className='gallery-page'>
           <div className='spotlight-1'></div>
           <div className='spotlight-2'></div> 
           <div className="newsWrapper">
            <Image
              src="/images/news.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="news-painting"
            />
          </div>
          <div className="redlineWrapper">
            <Image
              src="/images/redline2.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="red-painting"
            />
          </div>
          <div className="squiggleWrapper">
            <Image
              src="/images/squiggle2.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="squiggle-painting"
            />
          </div>
          <div className="boxImageWrapper">
            <Image
              src="/images/header.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="box-painting"
            />
          </div>
          <div className="oceanImageWrapper">
            <Image
              src="/images/blue-ocean.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="ocean-painting"
            />
          </div>
          <div className="weatherImageWrapper">
            <Image
              src="/images/weather.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="weather-painting"
            />
          </div>
        </div>
    );
}

export default DesktopGallery;



index.jsx:

import { forwardRef, useImperativeHandle, useRef } from 'react';
import { Canvas } from '@react-three/fiber';
import { Environment } from '@react-three/drei';
import Model from './Model';

const Wall = forwardRef((props, ref) => {
  const modelRef = useRef();

  useImperativeHandle(ref, () => ({
    moveForward: () => {
      if (modelRef.current?.moveForward) {
        modelRef.current.moveForward();
      } else {
        console.warn('‚ùå modelRef not ready yet');
      }
    }
  }));

  return (
    <Canvas style={{ background: '#000000' }}>
      <Model ref={modelRef} />
      <directionalLight intensity={0.75} position={[0, 2, 3]} />
      <Environment preset="city" />
    </Canvas>
  );
});

export default Wall;




Model.js:

import React, { useRef, useEffect, forwardRef, useImperativeHandle } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import { AnimationMixer, Box3, Vector3 } from 'three'

const Model = forwardRef((props, ref) => {
  const { scene, animations } = useGLTF('/medias/3d_gallery_wall.glb')
  const { viewport, clock } = useThree()
  const modelRef = useRef()
  const mixerRef = useRef()
  const actionsRef = useRef([])

  const velocity = useRef(0)
  const direction = new Vector3(0, 0, -1) // Forward

  useImperativeHandle(ref, () => ({
    moveForward: () => {
      console.log("üî• moveForward() called");
      velocity.current = 0.02;
    }
  }))

  useEffect(() => {
    if (animations.length) {
      mixerRef.current = new AnimationMixer(scene)
      animations.forEach((clip) => {
        const action = mixerRef.current.clipAction(clip)
        action.paused = true
        actionsRef.current.push(action)
      })
    }
  }, [animations, scene])

  useEffect(() => {
    const box = new Box3().setFromObject(scene)
    const center = new Vector3()
    box.getCenter(center)
    scene.position.sub(center)
  }, [scene])

  useFrame(() => {
    if (mixerRef.current) {
      mixerRef.current.update(clock.getDelta())
    }
    
    // Move forward if velocity is set
    if (velocity.current > 0 && modelRef.current) {
      modelRef.current.position.addScaledVector(direction, velocity.current)
    }

    // console.log(modelRef.current.position)
  })

  return (
    <group
      ref={modelRef}
      scale={viewport.width / 3.65}
      rotation={[0, 4.72, 0]}
    >
      <primitive object={scene} />
    </group>
  )
})

useGLTF.preload('/medias/3d_gallery_wall.glb')
export default Model




MobileGallery.jsx:

'use client';
import Image from "next/image";
import './MobileGallery.scss';

const MobileGallery = () => {

    return(
        
        <div className='gallery-page'>
           <div className='spotlight-1'></div>
           <div className='spotlight-2'></div> 
           <div className="newsImageWrapper">
            <Image
              src="/images/news.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="news-painting"
            />
          </div>
          <div className="redlineImageWrapper">
            <Image
              src="/images/redline2.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="redline-painting"
            />
          </div>
          <div className="squiggleImageWrapper">
            <Image
              src="/images/squiggle2.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="squiggle-painting"
            />
          </div>
          <div className="boxImageWrapper">
            <Image
              src="/images/header.png"
              width={500}
              height={300}
              alt="background"
              priority
              sizes="(max-width: 768px) 100vw, 55vw"
              className="box-painting"
            />
          </div>
        </div>
    );
}

export default MobileGallery;



page.jsx:

'use client';

import { useState, useRef } from "react";
import { useDeviceContext } from "../../../lib/hooks/useDeviceContext";
import DesktopGallery from "./desktop/DesktopGallery";
import MobileGallery from "./mobile/MobileGallery";
import GalleryLoader from "./components/GalleryLoader";

const Gallery = () => {
  const { isMobile } = useDeviceContext();
  const [showLoader, setShowLoader] = useState(true);
  const wallRef = useRef(); // üî• Move wallRef here

  const imageUrls = [
    "/images/news.png",
    "/images/redline2.png",
    "/images/squiggle2.png",
    "/images/header.png",
    "/images/blue-ocean.png",
    "/images/weather.png",
    "/images/redline.png",
    "/medias/3d_gallery_wall.glb"
  ];

  const handleEnterGallery = () => {
    // üëá Trigger animation first
    if (wallRef.current) {
      wallRef.current.moveForward();
    }

    // üëá Wait a sec for the animation to play before hiding loader
    setTimeout(() => {
      setShowLoader(false);
    }, 1500);
  };

  return (
    <>
      {!showLoader && (
        isMobile ? <MobileGallery /> : <DesktopGallery />
      )}

      {showLoader && (
        <GalleryLoader
          imageUrls={imageUrls}
          onComplete={handleEnterGallery}
          wallRef={wallRef} // üëà Pass the ref down
        />
      )}
    </>
  );
};

export default Gallery;



